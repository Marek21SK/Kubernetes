apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp-deployment
  labels:
    app: myapp
spec:
  replicas: 1 # počet replík, ktoré budú spustené 
  selector:
    matchLabels:
      app: myapp
  template:
    metadata:
      labels:
        app: myapp 
    spec:
      subdomain: mysql-service #sieťové prepojenie aplikácie a MySQL databázy 
      containers:
      - name: nodeserver-myapp # názov nášho kontajnera 
        #image: cloud.canister.io:5000/pasrdfffsas/myapp:latest # cloud.canister image fungujú rovnako ako ako Docker image
        image: marek21sk/myapp_v3:latest # použitie našej Docker image
        ports:
        - containerPort: 3000
        env:
        - name: DB_HOST 
          value: mysql-service # MySQL hostname
        - name: DB_PORT
          value: "3306" # MySQL port
        imagePullPolicy: Always
      imagePullSecrets:
        - name:  regcred # secret, ktorý Kubernetes použije pre pístup k image 
  strategy:
    type: RollingUpdate # spôsob aktualizácie Deploymentu v Kubernetes 
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  minReadySeconds: 5 # počkajme 5 sekúnd, aby sme sa uistili, že nový kontajner sa môže spustiť
---
apiVersion: v1
kind: Service
metadata:
  name: myapp-service
spec:
  selector:
    app: myapp 
  type: NodePort
  ports:
  - protocol: TCP
    port: 8080 # port, na ktorom bude služba vystavená 8080
    targetPort: 3000 # naša NodeJS aplikácia počúva na porte 3000
    nodePort: 31110 # port, na ktorom bude naša služba počúvať v prípade, že by sme nastavli prístup aplikácie z vonku 